#!/bin/bash

# CVE Monitoring Script for Multi-Cloud Kubernetes
# This script provides continuous monitoring for CVE updates and security advisories

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MONITORING_DIR="${SCRIPT_DIR}/security/monitoring"
LOG_FILE="${MONITORING_DIR}/cve-monitoring-$(date +%Y%m%d).log"

# Create monitoring directory
mkdir -p "${MONITORING_DIR}"

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ✅${NC} $1" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ⚠️${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ❌${NC} $1" | tee -a "$LOG_FILE"
}

# Function to check for Kubernetes CVE updates
check_kubernetes_cves() {
    log "Checking for Kubernetes CVE updates..."
    
    local k8s_cve_file="${MONITORING_DIR}/kubernetes-cves.json"
    
    # Fetch latest Kubernetes security advisories
    curl -s "https://api.github.com/repos/kubernetes/kubernetes/security-advisories" \
        -H "Accept: application/vnd.github.v3+json" \
        -o "$k8s_cve_file" || log_error "Failed to fetch Kubernetes security advisories"
    
    if [[ -f "$k8s_cve_file" ]]; then
        local cve_count=$(jq '.[] | select(.state == "published") | .summary' "$k8s_cve_file" 2>/dev/null | wc -l)
        log "Found $cve_count published Kubernetes security advisories"
        
        # Check for recent CVEs (last 30 days)
        local recent_cves=$(jq -r '.[] | select(.state == "published" and (.published_at | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime) > (now - 2592000)) | .summary' "$k8s_cve_file" 2>/dev/null)
        
        if [[ -n "$recent_cves" ]]; then
            log_warning "Recent Kubernetes CVEs found:"
            echo "$recent_cves" | while read -r cve; do
                log_warning "  - $cve"
            done
        else
            log_success "No recent Kubernetes CVEs found"
        fi
    fi
}

# Function to check for container runtime and CRI CVEs
check_container_runtime_cves() {
    log "Checking for container runtime and CRI CVE updates..."
    
    local components=("containerd" "runc" "cri-o" "docker")
    
    for component in "${components[@]}"; do
        log "Checking $component for CVEs..."
        
        local cve_file="${MONITORING_DIR}/${component}-cves.json"
        
        # Search for CVEs related to the component
        case $component in
            "containerd")
                curl -s "https://api.github.com/repos/containerd/containerd/security-advisories" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -o "$cve_file" || log_error "Failed to fetch containerd security advisories"
                ;;
            "runc")
                curl -s "https://api.github.com/repos/opencontainers/runc/security-advisories" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -o "$cve_file" || log_error "Failed to fetch runc security advisories"
                ;;
            "cri-o")
                curl -s "https://api.github.com/repos/cri-o/cri-o/security-advisories" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -o "$cve_file" || log_error "Failed to fetch cri-o security advisories"
                ;;
            "docker")
                curl -s "https://api.github.com/repos/docker/docker/security-advisories" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -o "$cve_file" || log_error "Failed to fetch docker security advisories"
                ;;
        esac
        
        if [[ -f "$cve_file" ]]; then
            local cve_count=$(jq '.[] | select(.state == "published") | .summary' "$cve_file" 2>/dev/null | wc -l)
            log "Found $cve_count published $component security advisories"
        fi
    done
}

# Function to check for container shim CVEs
check_container_shim_cves() {
    log "Checking for container shim CVE updates..."
    
    local shims=("containerd-shim")
    
    for shim in "${shims[@]}"; do
        log "Checking $shim for CVEs..."
        
        local cve_file="${MONITORING_DIR}/${shim}-cves.json"
        
        # Search for CVEs related to the shim
        case $shim in
            "containerd-shim")
                # containerd-shim is part of the containerd project
                curl -s "https://api.github.com/repos/containerd/containerd/security-advisories" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -o "$cve_file" || log_error "Failed to fetch containerd-shim security advisories"
                ;;
        esac
        
        if [[ -f "$cve_file" ]]; then
            local cve_count=$(jq '.[] | select(.state == "published") | .summary' "$cve_file" 2>/dev/null | wc -l)
            log "Found $cve_count published $shim security advisories"
        fi
    done
}

# Function to check for container client tools CVEs
check_container_client_tools_cves() {
    log "Checking for container client tools CVE updates..."
    
    local tools=("crictl")
    
    for tool in "${tools[@]}"; do
        log "Checking $tool for CVEs..."
        
        local cve_file="${MONITORING_DIR}/${tool}-cves.json"
        
        # Search for CVEs related to the tool
        case $tool in
            "crictl")
                curl -s "https://api.github.com/repos/kubernetes-sigs/cri-tools/security-advisories" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -o "$cve_file" || log_error "Failed to fetch crictl security advisories"
                ;;
        esac
        
        if [[ -f "$cve_file" ]]; then
            local cve_count=$(jq '.[] | select(.state == "published") | .summary' "$cve_file" 2>/dev/null | wc -l)
            log "Found $cve_count published $tool security advisories"
        fi
    done
}

# Function to check for Cilium CNI CVEs
check_cilium_cves() {
    log "Checking for Cilium CNI CVE updates..."
    
    local cilium_cve_file="${MONITORING_DIR}/cilium-cves.json"
    
    curl -s "https://api.github.com/repos/cilium/cilium/security-advisories" \
        -H "Accept: application/vnd.github.v3+json" \
        -o "$cilium_cve_file" || log_error "Failed to fetch Cilium security advisories"
    
    if [[ -f "$cilium_cve_file" ]]; then
        local cve_count=$(jq '.[] | select(.state == "published") | .summary' "$cilium_cve_file" 2>/dev/null | wc -l)
        log "Found $cve_count published Cilium security advisories"
    fi
}

# Function to check for Talos OS CVEs
check_talos_cves() {
    log "Checking for Talos OS CVE updates..."
    
    local talos_cve_file="${MONITORING_DIR}/talos-cves.json"
    
    curl -s "https://api.github.com/repos/siderolabs/talos/security-advisories" \
        -H "Accept: application/vnd.github.v3+json" \
        -o "$talos_cve_file" || log_error "Failed to fetch Talos security advisories"
    
    if [[ -f "$talos_cve_file" ]]; then
        local cve_count=$(jq '.[] | select(.state == "published") | .summary' "$talos_cve_file" 2>/dev/null | wc -l)
        log "Found $cve_count published Talos security advisories"
    fi
}

# Function to check NVD for specific CVEs
check_nvd_cves() {
    log "Checking NVD for relevant CVEs..."
    
    local nvd_file="${MONITORING_DIR}/nvd-cves.json"
    
    # Search for CVEs related to Kubernetes, containerd, runc
    local search_terms=("kubernetes" "containerd" "runc" "cilium" "talos")
    
    for term in "${search_terms[@]}"; do
        log "Searching NVD for $term CVEs..."
        
        # Note: NVD API requires registration for production use
        # This is a simplified example - in production, use proper NVD API
        curl -s "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=$term&resultsPerPage=20" \
            -H "Accept: application/json" \
            -o "${MONITORING_DIR}/nvd-${term}-cves.json" || log_warning "NVD API not accessible (requires registration)"
    done
}

# Function to generate CVE monitoring report
generate_cve_report() {
    log "Generating CVE monitoring report..."
    
    local report_file="${MONITORING_DIR}/cve-monitoring-report-$(date +%Y%m%d).md"
    
    cat > "$report_file" << EOF
# CVE Monitoring Report - $(date)

## Executive Summary
This report contains the results of automated CVE monitoring for the Multi-Cloud Kubernetes project.

## Monitoring Results

### Kubernetes Security Advisories
EOF

    if [[ -f "${MONITORING_DIR}/kubernetes-cves.json" ]]; then
        echo "```json" >> "$report_file"
        jq '.[] | select(.state == "published") | {summary: .summary, published_at: .published_at, severity: .severity}' "${MONITORING_DIR}/kubernetes-cves.json" >> "$report_file" 2>/dev/null || echo "No data available" >> "$report_file"
        echo "```" >> "$report_file"
    fi

    cat >> "$report_file" << EOF

### Container Runtime and CRI Security Advisories
EOF

    for component in "containerd" "runc" "cri-o" "docker"; do
        if [[ -f "${MONITORING_DIR}/${component}-cves.json" ]]; then
            echo "#### $component" >> "$report_file"
            echo "```json" >> "$report_file"
            jq '.[] | select(.state == "published") | {summary: .summary, published_at: .published_at}' "${MONITORING_DIR}/${component}-cves.json" >> "$report_file" 2>/dev/null || echo "No data available" >> "$report_file"
            echo "```" >> "$report_file"
        fi
    done

    cat >> "$report_file" << EOF

### Container Shim Security Advisories
EOF

    for shim in "containerd-shim"; do
        if [[ -f "${MONITORING_DIR}/${shim}-cves.json" ]]; then
            echo "#### $shim" >> "$report_file"
            echo "```json" >> "$report_file"
            jq '.[] | select(.state == "published") | {summary: .summary, published_at: .published_at}' "${MONITORING_DIR}/${shim}-cves.json" >> "$report_file" 2>/dev/null || echo "No data available" >> "$report_file"
            echo "```" >> "$report_file"
        fi
    done

    cat >> "$report_file" << EOF

### Container Client Tools Security Advisories
EOF

    for tool in "crictl"; do
        if [[ -f "${MONITORING_DIR}/${tool}-cves.json" ]]; then
            echo "#### $tool" >> "$report_file"
            echo "```json" >> "$report_file"
            jq '.[] | select(.state == "published") | {summary: .summary, published_at: .published_at}' "${MONITORING_DIR}/${tool}-cves.json" >> "$report_file" 2>/dev/null || echo "No data available" >> "$report_file"
            echo "```" >> "$report_file"
        fi
    done

    cat >> "$report_file" << EOF

### Cilium CNI Security Advisories
EOF

    if [[ -f "${MONITORING_DIR}/cilium-cves.json" ]]; then
        echo "```json" >> "$report_file"
        jq '.[] | select(.state == "published") | {summary: .summary, published_at: .published_at}' "${MONITORING_DIR}/cilium-cves.json" >> "$report_file" 2>/dev/null || echo "No data available" >> "$report_file"
        echo "```" >> "$report_file"
    fi

    cat >> "$report_file" << EOF

### Talos OS Security Advisories
EOF

    if [[ -f "${MONITORING_DIR}/talos-cves.json" ]]; then
        echo "```json" >> "$report_file"
        jq '.[] | select(.state == "published") | {summary: .summary, published_at: .published_at}' "${MONITORING_DIR}/talos-cves.json" >> "$report_file" 2>/dev/null || echo "No data available" >> "$report_file"
        echo "```" >> "$report_file"
    fi

    cat >> "$report_file" << EOF

## Recommendations

1. **Review New CVEs**: Check all newly published security advisories
2. **Prioritize by Severity**: Focus on HIGH and CRITICAL severity CVEs
3. **Update Components**: Apply patches and updates as they become available
4. **Test Updates**: Verify compatibility before deploying to production

## Next Steps

1. Review this report with the security team
2. Create remediation plans for identified CVEs
3. Schedule regular monitoring (daily/weekly)
4. Implement automated alerting for critical CVEs

---
*Report generated by cve-monitoring.sh on $(date)*
EOF

    log_success "CVE monitoring report generated: $report_file"
}

# Function to setup automated monitoring
setup_automated_monitoring() {
    log "Setting up automated CVE monitoring..."
    
    local cron_script="${MONITORING_DIR}/cve-monitor-cron.sh"
    
    cat > "$cron_script" << 'EOF'
#!/bin/bash
# Automated CVE monitoring script for cron

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR/../.."

# Run CVE monitoring
./cve-monitoring.sh

# Send alerts for critical CVEs (if configured)
# Add email/Slack notifications here
EOF

    chmod +x "$cron_script"
    
    # Create cron job example
    local cron_example="${MONITORING_DIR}/cron-example.txt"
    cat > "$cron_example" << EOF
# Example cron job for daily CVE monitoring
# Run this command to add to crontab:
# crontab -e

# Daily CVE monitoring at 9 AM
0 9 * * * $SCRIPT_DIR/cve-monitor-cron.sh >> $MONITORING_DIR/cron.log 2>&1

# Weekly comprehensive security scan
0 10 * * 1 $SCRIPT_DIR/../security-scan-and-update.sh >> $MONITORING_DIR/security-scan.log 2>&1
EOF

    log_success "Automated monitoring setup completed"
    log "Cron example saved to: $cron_example"
}

# Main execution
main() {
    log "Starting CVE monitoring process..."
    
    # Check for required tools
    if ! command -v jq >/dev/null 2>&1; then
        log_error "jq is required but not installed. Please install jq first."
        exit 1
    fi
    
    # Perform CVE checks
    check_kubernetes_cves
    check_container_runtime_cves
    check_container_shim_cves
    check_container_client_tools_cves
    check_cilium_cves
    check_talos_cves
    check_nvd_cves
    
    # Generate report
    generate_cve_report
    
    # Setup automated monitoring
    setup_automated_monitoring
    
    log_success "CVE monitoring process completed!"
    log "Results saved in: ${MONITORING_DIR}"
    log "Log file: $LOG_FILE"
}

# Run main function
main "$@"
